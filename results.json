{"results": [{"testsuites": {"testsuite": {"@name": "pytest", "@errors": "0", "@failures": "1", "@skipped": "0", "@tests": "1", "@time": "602.754", "@timestamp": "2023-02-02T19:35:26.331686", "@hostname": "5b760b4a2854", "testcase": {"@classname": "terraform_test", "@name": "test_maas_terraform_provider", "@time": "602.518", "failure": {"@message": "assert 1 == 0", "#text": "def test_maas_terraform_provider():\n        tester = MAASTerraformEndToEnd()\n        log = logging.getLogger()\n        try:\n>           tester.setup(log)\n\nterraform_test.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <terraform_test.MAASTerraformEndToEnd object at 0x7f064058ac20>\nlog = <RootLogger root (WARNING)>\n\n    def setup(self, log: logging.Logger) -> None:\n        init = [\"terraform\", \"init\"]\n        self._run_and_check_tf(init, log)\n        cmd = [\"terraform\",\"apply\", \"-auto-approve\", \"-input=false\"]\n>       self._run_and_check_tf(cmd, log)\n\nterraform_test.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <terraform_test.MAASTerraformEndToEnd object at 0x7f064058ac20>\nargs = ['terraform', 'apply', '-auto-approve', '-input=false']\nlog = <RootLogger root (WARNING)>\n\n    def _run_and_check_tf(self, args: List[str], log: logging.Logger):\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        stdout, stderr = None, None\n        try:\n>           ret_code = proc.wait(timeout=self._tf_timeout)\n\nterraform_test.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: ['terraform', 'apply', '-auto-approve', '-inp...>\ntimeout = 600\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for child process to terminate; returns self.returncode.\"\"\"\n        if timeout is not None:\n            endtime = _time() + timeout\n        try:\n>           return self._wait(timeout=timeout)\n\n/usr/lib/python3.10/subprocess.py:1207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: ['terraform', 'apply', '-auto-approve', '-inp...>\ntimeout = 600\n\n    def _wait(self, timeout):\n        \"\"\"Internal implementation of wait() on POSIX.\"\"\"\n        if self.returncode is not None:\n            return self.returncode\n    \n        if timeout is not None:\n            endtime = _time() + timeout\n            # Enter a busy loop if we have a timeout.  This busy loop was\n            # cribbed from Lib/threading.py in Thread.wait() at r71065.\n            delay = 0.0005 # 500 us -> initial delay of 1 ms\n            while True:\n                if self._waitpid_lock.acquire(False):\n                    try:\n                        if self.returncode is not None:\n                            break  # Another thread waited.\n                        (pid, sts) = self._try_wait(os.WNOHANG)\n                        assert pid == self.pid or pid == 0\n                        if pid == self.pid:\n                            self._handle_exitstatus(sts)\n                            break\n                    finally:\n                        self._waitpid_lock.release()\n                remaining = self._remaining_time(endtime)\n                if remaining <= 0:\n>                   raise TimeoutExpired(self.args, timeout)\nE                   subprocess.TimeoutExpired: Command '['terraform', 'apply', '-auto-approve', '-input=false']' timed out after 600 seconds\n\n/usr/lib/python3.10/subprocess.py:1933: TimeoutExpired\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_maas_terraform_provider():\n        tester = MAASTerraformEndToEnd()\n        log = logging.getLogger()\n        try:\n            tester.setup(log)\n            tester.check_results()\n        except Exception as e:\n>           tester.teardown(log)\n\nterraform_test.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nterraform_test.py:128: in teardown\n    self._run_and_check_tf(cmd, log)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <terraform_test.MAASTerraformEndToEnd object at 0x7f064058ac20>\nargs = ['terraform', 'destroy', '-auto-approve', '-input=false']\nlog = <RootLogger root (WARNING)>\n\n    def _run_and_check_tf(self, args: List[str], log: logging.Logger):\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        stdout, stderr = None, None\n        try:\n            ret_code = proc.wait(timeout=self._tf_timeout)\n>           assert ret_code == 0\nE           assert 1 == 0\n\nterraform_test.py:47: AssertionError"}}}}}, {"testsuites": {"testsuite": {"@name": "pytest", "@errors": "0", "@failures": "1", "@skipped": "0", "@tests": "1", "@time": "602.573", "@timestamp": "2023-02-02T19:10:37.201452", "@hostname": "a930e579f1af", "testcase": {"@classname": "terraform_test", "@name": "test_maas_terraform_provider", "@time": "602.346", "failure": {"@message": "subprocess.TimeoutExpired: Command '['terraform', 'apply', '-auto-approve', '-input=false']' timed out after 600 seconds", "#text": "def test_maas_terraform_provider():\n        tester = MAASTerraformEndToEnd()\n        log = logging.getLogger()\n        try:\n>           tester.setup(log)\n\nterraform_test.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nterraform_test.py:66: in setup\n    self._run_and_check_tf(cmd, log)\nterraform_test.py:46: in _run_and_check_tf\n    ret_code = proc.wait(timeout=self._tf_timeout)\n/usr/lib/python3.10/subprocess.py:1207: in wait\n    return self._wait(timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: ['terraform', 'apply', '-auto-approve', '-inp...>\ntimeout = 600\n\n    def _wait(self, timeout):\n        \"\"\"Internal implementation of wait() on POSIX.\"\"\"\n        if self.returncode is not None:\n            return self.returncode\n    \n        if timeout is not None:\n            endtime = _time() + timeout\n            # Enter a busy loop if we have a timeout.  This busy loop was\n            # cribbed from Lib/threading.py in Thread.wait() at r71065.\n            delay = 0.0005 # 500 us -> initial delay of 1 ms\n            while True:\n                if self._waitpid_lock.acquire(False):\n                    try:\n                        if self.returncode is not None:\n                            break  # Another thread waited.\n                        (pid, sts) = self._try_wait(os.WNOHANG)\n                        assert pid == self.pid or pid == 0\n                        if pid == self.pid:\n                            self._handle_exitstatus(sts)\n                            break\n                    finally:\n                        self._waitpid_lock.release()\n                remaining = self._remaining_time(endtime)\n                if remaining <= 0:\n>                   raise TimeoutExpired(self.args, timeout)\nE                   subprocess.TimeoutExpired: Command '['terraform', 'apply', '-auto-approve', '-input=false']' timed out after 600 seconds\n\n/usr/lib/python3.10/subprocess.py:1933: TimeoutExpired"}}}}}]}